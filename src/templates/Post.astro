---
import '@wordpress/block-library/build-style/common.css'
import '@wordpress/block-library/build-style/style.css'
import '@wordpress/block-library/build-style/theme.css'
import { Image } from 'astro:assets'
import type { Post } from '../api/post'
import type { Tag as TagType } from '../api/tag'
import type { Category as CategoryType } from '../api/category'
import BadgeTag from '../components/tag/badgeTag.astro'
import CommentList from '../components/post/commentList.astro'
import BadgeCategory from '../components/category/badgeCategory.astro'
import parseHtml from '../utils/parser'
import { getLangFromUrl, useTranslations } from '../i18n/utils'
import { getCommentsForPost } from '../api/comment'
import FormattedDate from '../components/formatedDate.astro'
import RelatedPost from '../components/post/relatedPost.astro'

const lang = getLangFromUrl(Astro.url)
const t = useTranslations(lang)
const post: Post = Astro.props.node
const comments = await getCommentsForPost(post.id, lang)
---

<div class="mb-12 space-y-2">
  <h1 class="text-center text-2xl">{post.title.rendered}</h1>

  <p class="text-center text-sm italic">
    <FormattedDate date={post.date} />
  </p>
  <!-- 
    Display tags and categories links if post has terms
    ['wp:term'][1] refers to tag 
  -->
  <div class="flex items-center justify-center gap-4">
    {post._embedded['wp:term'][1]?.map((tag: TagType) => <BadgeTag tag={tag} />)}
    {
      post._embedded['wp:term'][0]?.map((category: CategoryType) => (
        <BadgeCategory category={category} />
      ))
    }
  </div>
</div>

{
  post.featured_media_data[0] && (
    <Image
      src={post.featured_media_data[0]}
      alt={
        post.featured_media_data['alt_text']
          ? post.featured_media_data['alt_text']
          : post.title.rendered
      }
      width={post.featured_media_data[1]}
      widths={[330, 450, 620, 730]}
      sizes={`(max-width: 360px) 330, (max-width: 480px) 450px, (max-width: 1024px) 730px, 620px`}
      loading={'eager'}
      height={post.featured_media_data[2]}
      class="mx-auto mb-12 h-auto max-w-full rounded lg:max-w-prose"
    />
  )
}

<article
  class="prose prose-stone mx-auto dark:prose-invert"
  set:html={parseHtml(post.content.rendered)}
/>

{
  post.acf.related_posts.length > 0 && (
    <div class="prose prose-stone mx-auto my-12 dark:prose-invert">
      <h3 class="mb-8 text-center">{t('post.relatedPost.title')}</h3>
      <div class="grid grid-cols-3 gap-8">
        {post.acf.related_posts.map((postId) => (
          <RelatedPost postId={postId} />
        ))}
      </div>
    </div>
  )
}

<CommentList comments={comments} />
