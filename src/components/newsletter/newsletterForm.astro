---
import { useTranslations } from '../../i18n/ui'
import { getThemeOptions } from '../../api/options'
import { ADMIN_EMAIL } from '../../constant'
import InputText from '../ui/form/text.astro'
import InputEmail from '../ui/form/email.astro'
import FormErrors from '../ui/form/error.astro'
import FormSuccess from '../ui/form/success.astro'
import InputSubmit from '../ui/form/submit.astro'

type mlGroup = {
  value: string
  label: string
}

const lang = Astro.currentLocale as string
const t = useTranslations(lang)
const glaceOptions = await getThemeOptions(lang)
---

<form onsubmit="formSubmit(event, postMailerlite)" class="flex flex-col gap-8" novalidate>
  <FormSuccess message={t('newsletter.form.success')} />
  <FormErrors
    requiredFieldsError={t('newsletter.form.error.fields')}
    callbackError={'callback error' + ADMIN_EMAIL}
  />
  <div class="grid grid-cols-1 gap-8 md:grid-cols-2">
    <InputText required id="firstName" name="firstName" label={t('newsletter.form.firstName')} />
    <InputEmail required id="email" name="email" label={t('newsletter.form.email')} />

    {
      glaceOptions.available_groups_for_newsletter.length > 0 && (
        <div class="flex flex-col gap-4">
          {glaceOptions.available_groups_for_newsletter.map((group: mlGroup) => (
            <>
              <div class="flex cursor-pointer items-center gap-1">
                <input
                  id={group.value}
                  name="groups"
                  type="checkbox"
                  value={group.value}
                  class="h-4 w-4 cursor-pointer rounded border-stone-500 bg-stone-900 text-stone-50 focus:ring-2"
                />
                <label for={group.value} class="ms-2 cursor-pointer text-sm font-medium ">
                  {group.label}
                </label>
              </div>
            </>
          ))}
        </div>
      )
    }
  </div>
  <InputSubmit label={t('newsletter.form.submit')} />
</form>

<script is:inline>
  function getGroups(form) {
    const groups = []
    for (var i = 0; i < form.groups.length; i++) {
      if (form.groups[i].checked) {
        groups.push(form.groups[i].value)
      }
    }
    return groups
  }

  async function postMailerlite(form) {
    const params = {
      email: form.email.value,
      fields: {
        cv_source: 'newsletterModal',
        name: form.firstName.value
      },
      groups: getGroups(form)
    }

    const response = await fetch('/api/mailerlite', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(params)
    })

    if (!response.ok) {
      return Promise.reject(response)
    } else {
      return Promise.resolve(response)
    }
  }
</script>
