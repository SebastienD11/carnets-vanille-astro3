---
import { useTranslations } from '../../i18n/ui'
import InputText from '../ui/form/text.astro'
import InputEmail from '../ui/form/email.astro'
import InputSubmit from '../ui/form/submit.astro'
import FormErrors from '../ui/form/error.astro'
import FormSuccess from '../ui/form/success.astro'
import Textarea from '../ui/form/textarea.astro'
import { ADMIN_EMAIL, MAILERLITE_GROUPS } from '../../constant'
import { getThemeOptions } from '../../api/options'

type Props = {
  postId: number
  newsletterGroupId?: string
}

const lang = Astro.currentLocale as string
const { postId, newsletterGroupId }: Props = Astro.props
const t = useTranslations(lang)
const mailerliteGroup = MAILERLITE_GROUPS.find((group) => group.id === newsletterGroupId)
const glaceOptions = await getThemeOptions(lang)
---

<form
  id="comment-form"
  class="flex flex-col gap-8"
  onsubmit="formSubmit(event, postComment)"
  novalidate
>
  <input hidden required type="text" name="postId" value={postId} />
  <FormErrors
    requiredFieldsError={t('post.comments.form.errors.fields')}
    callbackError={t('post.comments.form.errors.callback') + ADMIN_EMAIL}
  />
  <FormSuccess message={t('post.comments.form.success')} />
  <div class="grid grid-cols-1 gap-8 md:grid-cols-2">
    <InputText required id="firstName" name="firstName" label={t('post.comments.form.firstName')} />
    <InputEmail required id="email" name="email" label={t('post.comments.form.email')} />
  </div>
  <div>
    <InputText id="website" name="website" label={t('post.comments.form.website')} />
  </div>
  <Textarea
    required
    id="comment"
    name="comment"
    label={t('post.comments.form.comment')}
    placeholder={t('post.comments.form.comment')}
  />
  {
    mailerliteGroup && (
      <div class="">
        <input
          type="checkbox"
          name="mailerlite_group_id"
          id="mailerlite_group_id"
          value={mailerliteGroup.id}
          class="relative top-0.5 mr-1 inline"
        />
        <label for="mailerlite_group_id">
          {t('post.comments.form.newsletter')}
          <strong>{mailerliteGroup.name}</strong>
          {glaceOptions.free_ebook_comments_mailerlite_group === mailerliteGroup.id && (
            <span set:html={t('post.comments.form.newsletter.ebook')} />
          )}
        </label>
      </div>
    )
  }
  <InputSubmit label={t('post.comments.form.submit')} />
</form>

<script is:inline>
  async function postComment(form) {
    // Post Comment
    const data = {
      post: form.postId.value,
      author_name: form.firstName.value,
      author_email: form.email.value,
      content: form.comment.value
    }

    const responseComment = await fetch('/api/comments', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(data)
    })

    if (!responseComment.ok) {
      return Promise.reject(responseComment)
    }

    // Post mailerLite
    if (form.mailerlite_group_id.checked) {
      const params = {
        email: form.email.value,
        fields: {
          cv_source: 'articleComment',
          name: form.firstName.value
        },
        groups: [form.mailerlite_group_id.value]
      }

      const mailerliteResponse = await fetch('/api/mailerlite', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(params)
      })

      if (!mailerliteResponse.ok) {
        return Promise.reject(mailerliteResponse)
      }
    }

    return Promise.resolve(responseComment)
  }
</script>
