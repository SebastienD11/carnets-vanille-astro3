---
import Header from '../components/header/Header.astro'
import '@fontsource-variable/mulish'
import Seo from '../components/head/seo.astro'
import LanguagePicker from '../components/theme/LanguagePicker.astro'
import { ResponsiveMenu } from '../components/responsiveMenu/ResponsiveMenu'
import ResponsiveMenuContent from '../components/responsiveMenu/ResponsiveMenuContent.astro'
import ToggleThemeIcon from '../components/theme/Icon.astro'

interface Props {
  seo: string
}

const { seo } = Astro.props

const lang = Astro.currentLocale as string
---

<!doctype html>
<html lang={lang}>
  <head>
    <meta charset="UTF-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0, maximum-scale=5.0, minimum-scale=1.0"
    />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <meta name="generator" content={Astro.generator} />
    <!-- SEO -->
    <Seo seo={seo} />
    <!-- Favicon -->
    <link rel="icon" href="/favicon.ico" sizes="32x32" />
    <link rel="icon" href="/icon.svg" type="image/svg+xml" />
    <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
    <link rel="manifest" href="/site.webmanifest" />
    <!-- CSS -->
    <link rel="stylesheet" href="/icons/glace.css" />
  </head>

  <body
    class="mx-auto bg-stone-50 px-4 py-6 font-mulish text-black md:container dark:bg-stone-900 dark:text-white"
  >
    <Header />
    <div
      id="responsive-menu-toggle"
      class="fixed right-4 top-4 flex -translate-y-full flex-col items-center gap-4 rounded-full bg-vanille bg-vanille/80 px-1 py-2 text-black opacity-50 shadow-md backdrop-blur transition duration-300 md:hidden"
    >
      <ResponsiveMenu client:idle>
        <ResponsiveMenuContent />
      </ResponsiveMenu>
      <ToggleThemeIcon color="text-dark" />
    </div>
    <script is:inline>
      window.addEventListener('scroll', function () {
        let responsiveMenuToggle = document.getElementById('responsive-menu-toggle')
        if (window.scrollY >= 50) {
          responsiveMenuToggle.classList.add('opacity-100', 'translate-y-0')
          responsiveMenuToggle.classList.remove('opacity-50', '-translate-y-full')
        } else {
          responsiveMenuToggle.classList.remove('opacity-100', 'translate-y-0')
          responsiveMenuToggle.classList.add('opacity-50', '-translate-y-full')
        }
      })
    </script>
    <slot />
    <footer class="mt-32 flex flex-col items-center gap-4">
      <LanguagePicker />
      <ToggleThemeIcon color="text-black dark:text-white" />
    </footer>

    <!-- Light/Dark Toggle -->
    <script is:inline>
      const theme = (() => {
        if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
          return localStorage.getItem('theme')
        }
        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
          return 'dark'
        }
        return 'light'
      })()

      if (theme === 'light') {
        document.documentElement.classList.remove('dark')
      } else {
        document.documentElement.classList.add('dark')
      }

      window.localStorage.setItem('theme', theme)

      const handleToggleClick = () => {
        const element = document.documentElement
        element.classList.toggle('dark')

        const isDark = element.classList.contains('dark')
        localStorage.setItem('theme', isDark ? 'dark' : 'light')
      }

      document
        .querySelectorAll('[theme-toggle]')
        .forEach((toggle) => toggle.addEventListener('click', handleToggleClick))
    </script>
  </body>
</html>
